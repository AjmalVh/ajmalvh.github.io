<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript, | Ajmal V Hassainar]]></title>
  <link href="http://ajmalvh.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ajmalvh.com/"/>
  <updated>2014-01-02T13:44:17+05:30</updated>
  <id>http://ajmalvh.com/</id>
  <author>
    <name><![CDATA[Ajmal Vh]]></name>
    <email><![CDATA[ajmalcpp@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript for C# Developers Part 2]]></title>
    <link href="http://ajmalvh.com/blog/2013/12/26/javascript-for-c-sharp-developers-part-2/"/>
    <updated>2013-12-26T23:00:58+05:30</updated>
    <id>http://ajmalvh.com/blog/2013/12/26/javascript-for-c-sharp-developers-part-2</id>
    <content type="html"><![CDATA[<h2>Javascript functions</h2>

<p>The concept of functions in Javascript is different from C#, functions are not just sub-routines or methods here, it is the heart and soul of javascript, it acts as sub-routines as well as objects. We can assign functions to variables, pass a function as parameter of another function etc..</p>

<h4>Function parameters &amp; Return values</h4>

<p>Just like C# we can define function parameters and can pass values when we call it. The difference is, it is not necessary to pass the exact number of parameters that we defined in the function definition when we call it. We can call the function with more or less parameters that is defined. <!--more-->The parameters that are not passed in are just <em>undefined</em>. We can also access the function parameter values using the <em>arguments</em> object inside the function. Let&rsquo;s look at an example.
```
var displayName(name1, name2, name3){</p>

<pre><code>alert(name1);
alert(name2);
alert(name3);
</code></pre>

<p>}</p>

<p>displayName(&lsquo;John&rsquo;); //name2 and name3 will be undefined
displayName(&lsquo;John, 'Mary&rsquo;); ////name3 will be undefined</p>

<p>//Accessing parameters with arguments object
var displayName(name1, name2){</p>

<pre><code>alert(arguments.length); //Display the number of parameters passed
alert(arguments[0]); //Display the first parameter
</code></pre>

<p>}</p>

<p>```
There is no <strong>function overloading</strong> in Javascript. There will be only one function with the specific name. If we define two functions with the same name and different argument lists. The second one will overwrite the first one regardless of the number of parameters. We will using the flexibility of javascript functions to achieve what we do with function overloading in C#. As is mentioned above, we can call a javascript function with more or less parameters that is defined. So, to achive function overloading kind of effect, inside the function definition we will check which all parameters are defined by the caller, and can prepare our logic according to that.</p>

<p>Every javascript function returns a value. There is no way to specify a return type. As javascript is a dynamic language the return type will only be resolved at the runtime. If we haven&rsquo;t specified any return, the returned value will be of type <em>undefined</em>. Functions can return values as well as reference to other functions.</p>

<h2>Scoping</h2>

<p>Unlike in C#, JavaScript does not have block-level scope (variables scoped to surrounding curly brackets). for example, in C# if we define a variable inside an if statement or a for loop it is not available outside it, because it is local to where it is defined. In javascript curly braces dont limit the scope, the only thing that creates a scope in javascript is a function. Variables declared within a function are local variables and are only accessible within that function or by functions inside that function. Here is an example code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var x = 10;
</span><span class='line'>if(true)
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var y = 5 * x;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>var result = y; // variable y is not available here</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var x = 10;
</span><span class='line'>if(true){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var y = 5 * x;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>var result = y; // This works!&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>//Creating scope with functions
</span><span class='line'>var x = 10;
</span><span class='line'>function hello(){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var y = 5 * x;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>var result = y; // This won&rsquo;t work.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Closure </h2>

<p>A closure in JavaScript is like keeping a copy of the all the local variables, just as they were when a function exited. If you declare a function within another function, then the local variables can remain accessible after returning from the function you called. The following code returns a reference to a function:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function sayHello2(name) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var text = 'Hello ' + name; // Local variable
</span><span class='line'>var sayAlert = function() { alert(text); }
</span><span class='line'>return sayAlert;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>say2 = sayHello2(&lsquo;Bob&rsquo;);
</span><span class='line'>say2(); // alerts &ldquo;Hello Bob&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we invoke the function reference returned by <em>sayHello2</em> function, you can see the local variable &lsquo;text&rsquo; of <em>sayHello2</em> function is still available with the <em>sayAlert</em> function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript for C# Developers Part 1]]></title>
    <link href="http://ajmalvh.com/blog/2013/12/25/javascript-for-c-sharp-developers/"/>
    <updated>2013-12-25T22:31:02+05:30</updated>
    <id>http://ajmalvh.com/blog/2013/12/25/javascript-for-c-sharp-developers</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Javascript is the new emerging language, few years back we where using it only on client side, now javascript is everywhere, there are tons of client side and server side frameworks.</p>

<p>I am C# developer for past few years, now i am working in with javascript also. When a developer from any curly brace language learn javascript, seeing the syntax, they just assume that the language works in the same way, but it is not. Even though the language syntax have some similarities it won&rsquo;t necessarily works in the way as you expected. Here are some tips that would help you to learn javascript from a C# developers point of view. <!--more--></p>

<h2>Comparing the languages</h2>

<p>Even though C# and Javascript are similar in structure, when we get down we can see a lot of differences in how they works. Here are some of the C# conventions and their javascript equivalent</p>

<p>Strongly Typed => Loosely Typed <br/>
Static => Dynamic <br/>
Classical Inheritance => Prototypical Inheritance <br/>
Classes => Functions <br/>
Methods => Functions</p>

<h4>Strong Typing vs Loose Typing</h4>

<p>In strong typing, types are defined by names and have a static structure, we know what all properties and
methods are inside a specific type. We cannot assign properties or methods dynamically at the runtime.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var foo = 123;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>foo = new Person(); //Compiler Error
</span><span class='line'>foo = &ldquo;Hey&rdquo;; //Compiler Error&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var bar = 123;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>bar = &ldquo;Hey Ajmal&rdquo;; //Now bar is of type string
</span><span class='line'>bar = new Person() //Now bar holds the person object</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In C#, we know the type of object returned in the compile time itself, but this is not in the case of javascript, type is assigned in the runtime just like C# the &lsquo;dynamic&rsquo; keyword in C#. Do not confuse javascript var keyword with the var keyword in C#. In C# we can use var when the compiler can infer the type in the compile time itself. In the above example, we cannot re-assign the type of variable &lsquo;foo&rsquo; to onother type in C#, because we typed &lsquo;foo&rsquo; to be an integer and we have to consistently use this as an integer, we cannot change the type of a variable after its creation. In Javascript there is no such rules.</p>

<h4>Dynamic Typing</h4>

<p>In Javascript we can add on to and remove properties of an object any time you need. Here we have an object with two properties, we can add properties or change the type of existing ones any time.
```
var person = {</p>

<pre><code>name: "Ajmal",
age: 24
</code></pre>

<p>};</p>

<p>person.country = &ldquo;India&rdquo;;
person.age = &ldquo;Twenty four&rdquo;;
person.sayName = function() {</p>

<pre><code>alert("My name is "+ this.name);
</code></pre>

<p>}
```
This is a very powerful feature of javascript, but there is a chance to mess up the code if we don&rsquo;t use it properly.</p>

<h2>Primitive Types</h2>

<p>These are the basic types in Javascript.</p>

<ul>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>object</li>
<li>function</li>
<li>null</li>
<li>undefined</li>
</ul>


<p>The types boolean, number, string and null has the same concept we have in C#. &lsquo;undefined&rsquo; is a special type in javascript, it implies the variable has not been defined yet. The concept of function in Javascript is different from C#, lets discuss about it in the coming chapters.</p>
]]></content>
  </entry>
  
</feed>
